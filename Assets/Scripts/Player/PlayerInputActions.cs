//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b2511ab0-aa87-4ab3-83b5-2b1fecad1f1d"",
            ""actions"": [
                {
                    ""name"": ""Reset player position"",
                    ""type"": ""Button"",
                    ""id"": ""6a1661a1-c09c-4099-80c2-2e3fe6ccab65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""44aef404-b106-4ef4-88ef-6d55b52cc457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelShoot"",
                    ""type"": ""Button"",
                    ""id"": ""7025d8d3-4390-4d3f-a0e5-5b5119dbba5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateCameraRotate"",
                    ""type"": ""Button"",
                    ""id"": ""bfc3dc63-d0bd-4ac9-b9b0-beadb07c7c66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab5a3a5a-53ee-43ed-aef4-34101b4daf92"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset player position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8989b7f9-0654-427f-b419-16233aa8998d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""774604dc-75c1-4a7b-8b10-833cb445e3c3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ef177d5-e9ea-40bf-b80d-b2aa64df0ba6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RotateCamera"",
            ""id"": ""d1fd7397-f79a-47fc-97e4-f499727b3eeb"",
            ""actions"": [
                {
                    ""name"": ""RotatingCamera"",
                    ""type"": ""Value"",
                    ""id"": ""5ccdab85-c42c-413e-87e1-2bd07078c8b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0206800f-06d8-48c6-9d3b-56f2f32c57a7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatingCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WaitingForInput"",
            ""id"": ""e61c0449-a426-4e90-a188-90580ddbef95"",
            ""actions"": [
                {
                    ""name"": ""Any key pressed"",
                    ""type"": ""Button"",
                    ""id"": ""00a48d80-39bd-485c-bcee-e539e59d794f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f0157b1-e299-4566-a55c-5020cc388fc2"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any key pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c17018f-f865-44b2-8774-568699a3da03"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any key pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ba8309-2339-4007-90ab-944b5c3681ff"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any key pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bbe93fd-5a45-433d-8726-89832997298b"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any key pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Resetplayerposition = m_Player.FindAction("Reset player position", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_CancelShoot = m_Player.FindAction("CancelShoot", throwIfNotFound: true);
        m_Player_ActivateCameraRotate = m_Player.FindAction("ActivateCameraRotate", throwIfNotFound: true);
        // RotateCamera
        m_RotateCamera = asset.FindActionMap("RotateCamera", throwIfNotFound: true);
        m_RotateCamera_RotatingCamera = m_RotateCamera.FindAction("RotatingCamera", throwIfNotFound: true);
        // WaitingForInput
        m_WaitingForInput = asset.FindActionMap("WaitingForInput", throwIfNotFound: true);
        m_WaitingForInput_Anykeypressed = m_WaitingForInput.FindAction("Any key pressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Resetplayerposition;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_CancelShoot;
    private readonly InputAction m_Player_ActivateCameraRotate;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resetplayerposition => m_Wrapper.m_Player_Resetplayerposition;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @CancelShoot => m_Wrapper.m_Player_CancelShoot;
        public InputAction @ActivateCameraRotate => m_Wrapper.m_Player_ActivateCameraRotate;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Resetplayerposition.started += instance.OnResetplayerposition;
            @Resetplayerposition.performed += instance.OnResetplayerposition;
            @Resetplayerposition.canceled += instance.OnResetplayerposition;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @CancelShoot.started += instance.OnCancelShoot;
            @CancelShoot.performed += instance.OnCancelShoot;
            @CancelShoot.canceled += instance.OnCancelShoot;
            @ActivateCameraRotate.started += instance.OnActivateCameraRotate;
            @ActivateCameraRotate.performed += instance.OnActivateCameraRotate;
            @ActivateCameraRotate.canceled += instance.OnActivateCameraRotate;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Resetplayerposition.started -= instance.OnResetplayerposition;
            @Resetplayerposition.performed -= instance.OnResetplayerposition;
            @Resetplayerposition.canceled -= instance.OnResetplayerposition;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @CancelShoot.started -= instance.OnCancelShoot;
            @CancelShoot.performed -= instance.OnCancelShoot;
            @CancelShoot.canceled -= instance.OnCancelShoot;
            @ActivateCameraRotate.started -= instance.OnActivateCameraRotate;
            @ActivateCameraRotate.performed -= instance.OnActivateCameraRotate;
            @ActivateCameraRotate.canceled -= instance.OnActivateCameraRotate;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // RotateCamera
    private readonly InputActionMap m_RotateCamera;
    private List<IRotateCameraActions> m_RotateCameraActionsCallbackInterfaces = new List<IRotateCameraActions>();
    private readonly InputAction m_RotateCamera_RotatingCamera;
    public struct RotateCameraActions
    {
        private @PlayerInputActions m_Wrapper;
        public RotateCameraActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotatingCamera => m_Wrapper.m_RotateCamera_RotatingCamera;
        public InputActionMap Get() { return m_Wrapper.m_RotateCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateCameraActions set) { return set.Get(); }
        public void AddCallbacks(IRotateCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Add(instance);
            @RotatingCamera.started += instance.OnRotatingCamera;
            @RotatingCamera.performed += instance.OnRotatingCamera;
            @RotatingCamera.canceled += instance.OnRotatingCamera;
        }

        private void UnregisterCallbacks(IRotateCameraActions instance)
        {
            @RotatingCamera.started -= instance.OnRotatingCamera;
            @RotatingCamera.performed -= instance.OnRotatingCamera;
            @RotatingCamera.canceled -= instance.OnRotatingCamera;
        }

        public void RemoveCallbacks(IRotateCameraActions instance)
        {
            if (m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateCameraActions @RotateCamera => new RotateCameraActions(this);

    // WaitingForInput
    private readonly InputActionMap m_WaitingForInput;
    private List<IWaitingForInputActions> m_WaitingForInputActionsCallbackInterfaces = new List<IWaitingForInputActions>();
    private readonly InputAction m_WaitingForInput_Anykeypressed;
    public struct WaitingForInputActions
    {
        private @PlayerInputActions m_Wrapper;
        public WaitingForInputActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Anykeypressed => m_Wrapper.m_WaitingForInput_Anykeypressed;
        public InputActionMap Get() { return m_Wrapper.m_WaitingForInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WaitingForInputActions set) { return set.Get(); }
        public void AddCallbacks(IWaitingForInputActions instance)
        {
            if (instance == null || m_Wrapper.m_WaitingForInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WaitingForInputActionsCallbackInterfaces.Add(instance);
            @Anykeypressed.started += instance.OnAnykeypressed;
            @Anykeypressed.performed += instance.OnAnykeypressed;
            @Anykeypressed.canceled += instance.OnAnykeypressed;
        }

        private void UnregisterCallbacks(IWaitingForInputActions instance)
        {
            @Anykeypressed.started -= instance.OnAnykeypressed;
            @Anykeypressed.performed -= instance.OnAnykeypressed;
            @Anykeypressed.canceled -= instance.OnAnykeypressed;
        }

        public void RemoveCallbacks(IWaitingForInputActions instance)
        {
            if (m_Wrapper.m_WaitingForInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWaitingForInputActions instance)
        {
            foreach (var item in m_Wrapper.m_WaitingForInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WaitingForInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WaitingForInputActions @WaitingForInput => new WaitingForInputActions(this);
    public interface IPlayerActions
    {
        void OnResetplayerposition(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnCancelShoot(InputAction.CallbackContext context);
        void OnActivateCameraRotate(InputAction.CallbackContext context);
    }
    public interface IRotateCameraActions
    {
        void OnRotatingCamera(InputAction.CallbackContext context);
    }
    public interface IWaitingForInputActions
    {
        void OnAnykeypressed(InputAction.CallbackContext context);
    }
}
